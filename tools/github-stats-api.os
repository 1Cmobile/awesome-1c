#Использовать strings
#Использовать cmdline
#Использовать logos
#Использовать json

Перем Соединение;

Перем УникальныеПользователи;
Перем УникальныеРепо;

Перем РепозиторииBSL;
Перем РепозиторииOS;

Перем ЖурналРаботы;
Перем мВозможныеКоманды;

Перем КодВозврата;

Перем РежимВывода;
Перем ФайлВыводаMarkdown;

Перем ПреобразованиеJSON;

Перем КоличествоМинусРепозиториев;

Функция Инициализировать()
    
    Соединение = Новый HTTPСоединение("https://api.github.com");
    
    УникальныеПользователи = Новый Соответствие;
    УникальныеРепо = Новый Соответствие;
    
    РепозиторииOS = Новый Соответствие;
    РепозиторииBSL = Новый Соответствие;
    
    ЖурналРаботы = Логирование.ПолучитьЛог("oscript.app.bsl-os-github-search");
    
    ПреобразованиеJSON = Новый ПарсерJSON();


	//на самом деле тут какой-то косяк ГитХаба - это либо количество, либо символы
    КоличествоМинусРепозиториев = 10;
    
КонецФункции

Функция ОбработатьПараметрыЗапуска()
    
    Попытка
        
        Парсер = Новый ПарсерАргументовКоманднойСтроки();
        
        ДобавитьОписаниеКомандыПомощь(Парсер);
        ДобавитьОписаниеКомандыТекстовыйРезультат(Парсер);
        ДобавитьОписаниеКомандыMarkdown(Парсер);
        
        Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);
        ЖурналРаботы.Отладка("ТипЗнч(Аргументы)= "+ТипЗнч(Аргументы));
        
        Если Аргументы = Неопределено ИЛИ Аргументы.Команда = ВозможныеКоманды().ВывестиВКонсоль Тогда
            
            КодВозврата = 0;
            ЖурналРаботы.Информация("Установлен режим вывода в консоль (по умолчанию)");
            РежимВывода = "Журнал";
            
            Возврат Истина;
            
        КонецЕсли;
        
        Команда = Аргументы.Команда;
        ЖурналРаботы.Отладка("Передана команда: "+ Команда);
        
        Для Каждого Параметр Из Аргументы.ЗначенияПараметров Цикл
            ЖурналРаботы.Отладка(Параметр.Ключ + " = " + Параметр.Значение);
        КонецЦикла;
        
        Если Команда = ВозможныеКоманды().Помощь Тогда
            
            КодВозврата = 0;
            ВывестиСправку();
            Возврат Ложь;
            
        ИначеЕсли Команда = ВозможныеКоманды().ВывестиВMarkdown Тогда
            
            КодВозврата = 0;
            
            РежимВывода = "ФайлMarkdown";
            ЖурналРаботы.Информация("Установлен режим вывода в MARKDOWN (текстовый документ с разметкой)");
            
            _аргументПуть = Аргументы.ЗначенияПараметров["--markdown-path"];
            
            ФайлВыводаMarkdown = ОбъединитьПути(ТекущийКаталог(), _аргументПуть); 
            
            ЖурналРаботы.Информация("Файл будет сохранен в: " +ФайлВыводаMarkdown);
            
            Возврат Истина;
            
        КонецЕсли;
        
    Исключение
        ЖурналРаботы.Ошибка(ОписаниеОшибки());
        
        КодВозврата = 1;
        
        Возврат Ложь;
        
    КонецПопытки;
    
    Возврат Истина;
    
КонецФункции // ИмяПроцедуры()

Функция ВозможныеКоманды()
    
    Если мВозможныеКоманды = Неопределено Тогда
        
        мВозможныеКоманды = Новый Структура;
        
        мВозможныеКоманды.Вставить("ВывестиВMarkdown", "generate-markdown");
        мВозможныеКоманды.Вставить("ВывестиВКонсоль", "generate-txt-log");
        мВозможныеКоманды.Вставить("Помощь", "help");
        
    КонецЕсли;
    
    Возврат мВозможныеКоманды;
    
    
КонецФункции

Процедура ДобавитьОписаниеКомандыПомощь(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Помощь);
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыТекстовыйРезультат(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ВывестиВКонсоль);
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыMarkdown(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ВывестиВMarkdown);
    
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--markdown-path", "путь к сохранению результирующего файла");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ВывестиСправку()
    
    Сообщить(
    "Утилита поиска BSL (1C) и OS(oscript) файлов в GitHub репозиториях
    |
    |Возможные команды: 
    |	generate-txt-log [] - режим по умолчанию: вывод информации в консоль и журнал работы 
    |  
    |	generate-markdown [--markdown-path] - режим генерации файла с разметкой Mаrkdown
    |		параметр:  --markdown-path - путь к сохранению результирующего файла
    |
    |	help - режимы справки: выводит справку по командам скрипта
    |");
    
    
КонецПроцедуры



/////////////////////////////////////////// ЛОГИКА ДОСТУПА ///////////////////////////////////////////////////////////////////////

Функция ВыполнитьПоиск(СтрокаПоиска, ТекущаяКоллекцияПоиска)
    
    СсылкаНаСтраницуРезультатов = ПолучитьСсылкуНаСтраницуРезультатов(СтрокаПоиска,1,ТекущаяКоллекцияПоиска);
    
    МассивТаймаутов = Новый Массив;
    МассивТаймаутов.Добавить(2000);
    МассивТаймаутов.Добавить(3000);
    МассивТаймаутов.Добавить(4000);
    СчетчикТаймаутов = 0;
    
    СчетчикСтраниц = 1;
    
    ОсталосьОбработать = 1;
    
    Попытка
        Пока ОсталосьОбработать > 0 Цикл
            
			ЖурналРаботы.Информация("
            |  Установлена строка для поиска 
    		|" + СсылкаНаСтраницуРезультатов);

            СодержимоеСтраницы = ВыполнитьЗапросМетодомGET(СсылкаНаСтраницуРезультатов);
			
            //жестокаяОтладка = ОбъединитьПути(ТекущийКаталог(),"temp","" + СчетчикСтраниц + ".html");
            
            //страницаНаДиске = Новый ЗаписьТекста();
            //страницаНаДиске.Открыть(жестокаяОтладка);
            //страницаНаДиске.ЗаписатьСтроку(СодержимоеСтраницы);
            //страницаНаДиске.Закрыть();
            
            СтруктураРезультатов = ПолучитьДанныеСтраницыРезультатов(СодержимоеСтраницы);
            
            НайденоФайлов = Число(СтруктураРезультатов.Получить("total_count"));
            СписокРезультатовПоиска = СтруктураРезультатов.Получить("items");
            ОбъемРезультатовПоиска = СписокРезультатовПоиска.Количество();

            ОсталосьОбработать = НайденоФайлов - 100 * СчетчикСтраниц;
            
            ЖурналРаботы.Информация("--> Вернулся список из " + НайденоФайлов + " файлов");
            ЖурналРаботы.Информация("-----> текущий массив из " + ОбъемРезультатовПоиска + " элементов");
            
            Для каждого ЭлементРезультата из СписокРезультатовПоиска Цикл
                
                Репозитторий = ЭлементРезультата.Получить("repository");
                Владелец = Репозитторий.Получить("owner");
                Пользователь = Владелец.Получить("login");
                НаименованиеПроекта = Репозитторий.Получить("full_name");
                
                
                ЖурналРаботы.Информация("----------> Пользователь " + Пользователь + " с репозиторием " + НаименованиеПроекта);
                
                Если УникальныеРепо.Получить(НаименованиеПроекта) = Неопределено Тогда
                    УникальныеРепо[НаименованиеПроекта] = НаименованиеПроекта;
                КонецЕсли;
                
                Если УникальныеПользователи.Получить(Пользователь) = Неопределено Тогда
                    УникальныеПользователи[Пользователь] = "https://github.com/" + Пользователь;
                КонецЕсли;
                
                ТекущаяКоллекцияПоиска[НаименованиеПроекта] = "https://github.com/" + НаименованиеПроекта;
                
            КонецЦикла;


			Если ОсталосьОбработать > 0 Тогда


                Если ТекущаяКоллекцияПоиска.Количество() > КоличествоМинусРепозиториев Тогда
                    СчетчикСтраниц = СчетчикСтраниц + 1;
					СсылкаНаСтраницуРезультатов = ПолучитьСсылкуНаСтраницуРезультатов(СтрокаПоиска, СчетчикСтраниц, ТекущаяКоллекцияПоиска);	
                Иначе
                    СсылкаНаСтраницуРезультатов = ПолучитьСсылкуНаСтраницуРезультатов(СтрокаПоиска, 1, ТекущаяКоллекцияПоиска);
                КонецЕсли;

                ЖурналРаботы.Информация("Ждем... 5 секунд - осталось обработать " + ОсталосьОбработать);
				Приостановить(5000);

            КонецЕсли;
            
        КонецЦикла;
    Исключение 
        ЖурналРаботы.Информация(ОписаниеОшибки());
    КонецПопытки;
    
    
КонецФункции

Функция ПолучитьДанныеСтраницыРезультатов(JSONКодСтраницы)
    
    ДанныеGITHUB = ПреобразованиеJSON.ПрочитатьJSON(JSONКодСтраницы);
    
    ЖурналРаботы.Информация(ДанныеGITHUB);
    
    Возврат ДанныеGITHUB;
    
КонецФункции

Функция ПолучитьДанныеРезультатаПоиска(HtmlКодЭлементаРезультата)
    ВызватьИсключение "Не реализовано";
КонецФункции

Функция ВыполнитьЗапросМетодомGET(Ресурс, ПараметрыЗапроса=Неопределено, ВремяОжиданияВМинутах=2)
    
    Заголовки = Новый Соответствие();

	ОкружениеСистемы = Новый СистемнаяИнформация;
    АутентификацияGH = ОкружениеСистемы.ПолучитьПеременнуюСреды("GHAUTH");

    Заголовки.Вставить("Authorization", АутентификацияGH);
    Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");
    
    Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
    
    Ответ = Соединение.Получить(Запрос);
    
    Для каждого ОтветыGH Из Ответ.Заголовки Цикл
    	ЖурналРаботы.Информация("-- " + ОтветыGH.Ключ + " " + ОтветыGH.Значение);    
    КонецЦикла;

    Если Ответ.КодСостояния = 429 Тогда
        ЖурналРаботы.Информация("Github жалуется, что мы слишком часто делаем запросы - подождем " + ВремяОжиданияВМинутах + " минут и попытаемся снова");
        Приостановить(ВремяОжиданияВМинутах * 60 * 1000);
        Возврат ВыполнитьЗапросМетодомGET(Ресурс, ПараметрыЗапроса, ВремяОжиданияВМинутах + 1); // Увеличим время ожидания
    ИначеЕсли Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение "GitHub сообщил об ошибке " + Ответ.КодСостояния  + ": " + Ответ.ПолучитьТелоКакСтроку();
    КонецЕсли;
    
    Возврат Ответ.ПолучитьТелоКакСтроку();
    
    
КонецФункции

Функция ПолучитьСсылкуНаСтраницуРезультатов(Знач СтрокаПоиска, СчетчикСтраниц = 1, ТекущаяКоллекцияПоиска)
    
    СсылкаНаСтраницуРезультатов = "search/code?q=" + СтрокаПоиска ;

	//GitHub враги не позволяют делать минус-репозитории больше 20

    счУникальных = 0;
	Для Каждого УникальныйРепо Из ТекущаяКоллекцияПоиска Цикл
		СсылкаНаСтраницуРезультатов = СсылкаНаСтраницуРезультатов + "+-repo:" +  КодироватьСтроку(УникальныйРепо.Ключ, СпособКодированияСтроки.КодировкаURL);
        счУникальных = счУникальных + 1;

        Если счУникальных > КоличествоМинусРепозиториев Тогда
        	Прервать;
        КонецЕсли;

	КонецЦикла;

    Если СчетчикСтраниц > 1 Тогда
        СсылкаНаСтраницуРезультатов = СсылкаНаСтраницуРезультатов + "&page=" + СчетчикСтраниц;
    КонецЕсли;

    
	СсылкаНаСтраницуРезультатов = СсылкаНаСтраницуРезультатов + "&per_page=100";

    Возврат СсылкаНаСтраницуРезультатов;
    
КонецФункции


/////////////////////////////////////////// ОБРАБОТКА РЕЗУЛЬТАТОВ /////////////////////////////////////////////////////////////////

Процедура ВывестиРезультатыПоиска()
    
    ЖурналРаботы.Информация("=========================================================================");
    ЖурналРаботы.Информация("============================== ПОЛЬЗОВАТЕЛИ =============================");
    ЖурналРаботы.Информация("=========================================================================");
    Для каждого Элемент из УникальныеПользователи Цикл
        ЖурналРаботы.Информация(Элемент.Ключ);
    КонецЦикла;
    
    ЖурналРаботы.Информация("=========================================================================");
    ЖурналРаботы.Информация("============================== РЕПОЗИТОРИИ ==============================");
    ЖурналРаботы.Информация("=========================================================================");
    Для каждого Элемент из УникальныеРепо Цикл
        ЖурналРаботы.Информация(Элемент.Значение);
    КонецЦикла;
    
КонецПроцедуры


Процедура ВывестиРезультатыПоискаВMarkdown()
    
    ДокументMarkdown = Новый ЗаписьТекста;
    
    Попытка
        ДокументMarkdown.Открыть(ФайлВыводаMarkdown);
    Исключение
        ЖурналРаботы.Ошибка("Ошибка открытия документа для записи результатов 
        |" + ФайлВыводаMarkdown + "
        |подробное описание ошибки: " + ОписаниеОшибки());
    КонецПопытки;
    
    ЖурналРаботы.Информация("начато формирование файла результатов " + ФайлВыводаMarkdown);
    
    ДокументMarkdown.ЗаписатьСтроку(
    "# BSL и OScript репозиторий и их пользователи
    |
    |Актуальность: " + ТекущаяДата() + "
    |
    |## Пользователи
    |
    |Общее количество пользователей: " + УникальныеПользователи.Количество() + "
    |Всего репозиториев: " + УникальныеРепо.Количество() + "
    |
    || Пользователь | Акаунт |
    |---|---|
    |" + СоответствиеВMarkdownТаблицу(УникальныеПользователи) + "
    |
    |
    |## Репозитории BSL (1C)
    |
    |Общее количество репозиториев: " + РепозиторииBSL.Количество() + "
    |
    || Репозиторий | URL |
    ||---|---|
    |" + СоответствиеВMarkdownТаблицу(РепозиторииBSL) + "
    |
    |
    |## Репозитории OS (1Script)
    |
    |Общее количество репозиториев: " + РепозиторииOS.Количество() + "
    |
    || Репозиторий | URL |
    ||---|---|
    |" + СоответствиеВMarkdownТаблицу(РепозиторииOS) + "
    |
    |
    |");
    
    ДокументMarkdown.Закрыть();
    
КонецПроцедуры

Функция СоответствиеВMarkdownТаблицу(_соответствие)
    
    СтроковоеПредставлениеСоответствия = "";
    
    Для каждого ключЗначение Из _соответствие Цикл
        СтроковоеПредставлениеСоответствия = СтроковоеПредставлениеСоответствия + "| " + 
        ключЗначение.Ключ + " | " + ключЗначение.Значение + " |
        |";
    КонецЦикла;
    
    Возврат СтроковоеПредставлениеСоответствия;
    
КонецФункции

Инициализировать();

УспешноОбработалиПараметры = ОбработатьПараметрыЗапуска();

Если УспешноОбработалиПараметры Тогда
    
    ВыполнитьПоиск("КонецПроцедуры+OR+КонецФункции+OR+КонецЦикла+OR+КонецЕсли+OR+EndProcedure+OR+EndFunction+in:file+extension:os"
    , РепозиторииOS);
    ВыполнитьПоиск("КонецПроцедуры+OR+КонецФункции+OR+КонецЦикла+OR+КонецЕсли+OR+EndProcedure+OR+EndFunction+in:file+extension:bsl"
    , РепозиторииBSL);
    
    Если РежимВывода = "ФайлMarkdown" Тогда
        ВывестиРезультатыПоискаВMarkdown();
    Иначе
        ВывестиРезультатыПоиска();	
    КонецЕсли;
    
Иначе
    ЗавершитьРаботу(КодВозврата);
КонецЕсли; 
